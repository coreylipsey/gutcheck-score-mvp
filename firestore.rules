rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    function isAuthed() { 
      return request.auth != null; 
    }
    
    function isAdmin() {
      return isAuthed() && request.auth.token.admin == true;
    }
    
    function authedEmail() {
      return isAuthed() ? request.auth.token.email : null;
    }
    
    // Accept partner email on either field name (null-safe)
    function partnerEmailOf(resourceData) {
      return resourceData.partnerEmail != null
        ? resourceData.partnerEmail
        : (resourceData.email != null ? resourceData.email : null);
    }
    
    // Check if partner can access resource (null-safe)
    function isPartnerFor(resourceData) {
      let email = partnerEmailOf(resourceData);
      return email != null && authedEmail() != null && authedEmail() == email;
    }

    function isOwner(userId) {
      return isAuthed() && request.auth.uid == userId;
    }

    // Only allow partners to touch outcomeTracking; everything else immutable.
    function outcomeOnlyChanged() {
      let diff = request.resource.data.diff(resource.data);
      // no removals
      return diff.removedKeys().size() == 0
        // Only "outcomeTracking" and "updatedAt" can be added/changed
        && (diff.addedKeys().hasOnly(["outcomeTracking", "updatedAt"]) || diff.addedKeys().size() == 0)
        && (diff.changedKeys().hasOnly(["outcomeTracking", "updatedAt"]) || diff.changedKeys().size() == 0);
    }

    // --- assessmentSessions ---
    match /assessmentSessions/{sessionId} {
      allow read: if isAuthed() && (
        // end-user can read own session
        (resource.data.userId != null && isOwner(resource.data.userId))
        ||
        // partner can read sessions tagged with their partnerId or email
        isPartnerFor(resource.data.partnerMetadata)
      );

      // end-user/app creates; partners never create via client in MVP
      allow create: if true; // created via client flow (or emulator); server also bypasses

      // user may update own (e.g., progress); partners may update *only* outcomeTracking
      allow update: if (
        (resource.data.userId != null && isOwner(resource.data.userId)) ||
        (isPartnerFor(resource.data.partnerMetadata) && outcomeOnlyChanged())
      );

      // no deletes from clients in MVP
      allow delete: if false;
    }

    // Primary collection
    match /partnerCohorts/{cohortId} {
      allow read: if isPartnerFor(resource.data) || isAdmin();
      allow write: if false; // keep immutable from client
    }

    // Legacy alias (for tests / older UI)
    match /cohorts/{cohortId} {
      allow read: if isPartnerFor(resource.data) || isAdmin();
      allow write: if false;
    }

    // Partners collection
    match /partners/{partnerId} {
      allow read: if isPartnerFor(resource.data) || isAdmin();
      allow write: if false;
    }

    // --- Lock down everything else by default ---
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
