'use client';

import { useEffect, useState, Suspense } from 'react';
import Link from 'next/link';
import { useSearchParams } from 'next/navigation';
import { getAssessmentSession } from '@/lib/firestore';
import { FirestoreAssessmentSession } from '@/types/firestore';
import { Timestamp } from 'firebase/firestore';
import { HeroScore } from '@/components/results/HeroScore';
import { CategoryBreakdown } from '@/components/results/CategoryBreakdown';
import { PersonalizedInsights } from '@/components/results/PersonalizedInsights';
import { NextSteps } from '@/components/results/NextSteps';
import { ClaimScoreModal } from '@/components/auth/ClaimScoreModal';
import { useAuthContext } from '@/presentation/providers/AuthProvider';


function ResultsContent() {
  const [sessionData, setSessionData] = useState<FirestoreAssessmentSession | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showClaimModal, setShowClaimModal] = useState(false);
  const { user } = useAuthContext();
  const searchParams = useSearchParams();

  useEffect(() => {
    const loadResults = async () => {
      try {
        // First check for sessionId in URL query params (from dashboard links)
        const urlSessionId = searchParams.get('sessionId');
        // Then fallback to localStorage (for current assessment)
        const localSessionId = localStorage.getItem('sessionId');
        const sessionId = urlSessionId || localSessionId;
        
        if (sessionId) {
          const data = await getAssessmentSession(sessionId);
          if (data) {
            // Data loaded from Firestore
            setSessionData(data);
          } else {
            // Fallback to localStorage data if Firestore data not found
            const localData = localStorage.getItem('responsesData');
            if (localData) {
              const parsedData = JSON.parse(localData);
              // Data loaded from localStorage
              // Create a mock session data object from localStorage
              const mockSessionData: FirestoreAssessmentSession = {
                id: sessionId,
                sessionId: sessionId,
                userId: undefined,
                responses: parsedData.responses || [],
                scores: parsedData.scores || {
                  overallScore: 0,
                  personalBackground: 0,
                  entrepreneurialSkills: 0,
                  resources: 0,
                  behavioralMetrics: 0,
                  growthVision: 0,
                },
                starRating: parsedData.starRating || 1,
                categoryBreakdown: parsedData.categoryBreakdown || {},
                geminiFeedback: parsedData.geminiFeedback || {
                  feedback: "Your personalized feedback will be generated by AI based on your responses.",
                  strengths: "Your top strength will be identified based on your assessment scores.",
                  focusAreas: "Your priority focus area will be determined from your assessment results.",
                  nextSteps: "Recommended next steps will be provided based on your profile."
                },
                createdAt: Timestamp.fromDate(new Date()),
                completedAt: Timestamp.fromDate(new Date()),
                isAnonymous: true,
              };
              setSessionData(mockSessionData);
            } else {
              setError('No assessment data found');
            }
          }
        } else {
          setError('No session ID found');
        }
      } catch (error) {
        console.error('Error loading results:', error);
        // Fallback to localStorage data on error
        const localData = localStorage.getItem('responsesData');
        if (localData) {
          const parsedData = JSON.parse(localData);
          const mockSessionData: FirestoreAssessmentSession = {
            id: 'local-session',
            sessionId: 'local-session',
            userId: undefined,
            responses: parsedData.responses || [],
            scores: parsedData.scores || {
              overallScore: 0,
              personalBackground: 0,
              entrepreneurialSkills: 0,
              resources: 0,
              behavioralMetrics: 0,
              growthVision: 0,
            },
            starRating: parsedData.starRating || 1,
            categoryBreakdown: parsedData.categoryBreakdown || {},
            geminiFeedback: parsedData.geminiFeedback || {
              feedback: "Your personalized feedback will be generated by AI based on your responses.",
              strengths: "Your top strength will be identified based on your assessment scores.",
              focusAreas: "Your priority focus area will be determined from your assessment results.",
              nextSteps: "Recommended next steps will be provided based on your profile."
            },
            createdAt: Timestamp.fromDate(new Date()),
            completedAt: Timestamp.fromDate(new Date()),
            isAnonymous: true,
          };
          setSessionData(mockSessionData);
        } else {
          setError('Failed to load assessment results');
        }
      } finally {
        setLoading(false);
      }
    };

    loadResults();
  }, [searchParams]);

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-50/30 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading your results...</p>
        </div>
      </div>
    );
  }

  if (error || !sessionData) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-50/30 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">Results Not Found</h1>
          <p className="text-gray-600 mb-6">
            {error || "We couldn't find your assessment results."}
          </p>
          <Link
            href="/assessment"
            className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            Take Assessment Again
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-50/30">
      <div className="max-w-7xl mx-auto px-6 py-12 lg:px-12 lg:py-20">
        <div className="space-y-20">
          
          {/* Hero Score Section */}
          <section 
            aria-label="Overall Gutcheck Score and Assessment Results"
            className="scroll-mt-20"
          >
            <HeroScore sessionData={sessionData} />
          </section>

          {/* Category Breakdown Section */}
          <section 
            aria-label="Category Performance Breakdown"
            className="scroll-mt-20"
          >
            <CategoryBreakdown sessionData={sessionData} />
          </section>

          {/* Personalized Insights Section */}
          <section 
            aria-label="Personalized AI Insights and Analysis"
            className="scroll-mt-20"
          >
            <PersonalizedInsights sessionData={sessionData} />
          </section>

          {/* Next Steps Section */}
          <section 
            aria-label="Recommended Next Steps and Action Plan"
            className="scroll-mt-20"
          >
            <NextSteps sessionData={sessionData} />
          </section>

          {/* Claim Score Section for Anonymous Users */}
          {sessionData.isAnonymous && !user && (
            <section 
              aria-label="Save Your Score"
              className="scroll-mt-20"
            >
              <div className="bg-white rounded-2xl shadow-lg p-8 border border-gray-100">
                <div className="text-center">
                  <div className="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-gradient-to-r from-[#147AFF] to-[#19C2A0] mb-6">
                    <svg
                      className="h-8 w-8 text-white"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"
                      />
                    </svg>
                  </div>
                  <h2 className="text-3xl font-bold text-[#0A1F44] mb-4">
                    Save Your Gutcheck Score
                  </h2>
                  <p className="text-gray-600 mb-8 max-w-2xl mx-auto text-lg">
                    Create a free account to save your results, track your progress over time, 
                    and get personalized insights and recommendations for your entrepreneurial journey.
                  </p>
                  <div className="flex flex-col sm:flex-row gap-4 justify-center">
                    <button
                      onClick={() => setShowClaimModal(true)}
                      className="px-8 py-4 bg-gradient-to-r from-[#147AFF] to-[#19C2A0] text-white rounded-xl hover:from-[#147AFF]/90 hover:to-[#19C2A0]/90 focus:outline-none focus:ring-2 focus:ring-[#147AFF] focus:ring-offset-2 transition-all font-bold shadow-lg"
                    >
                      Create Account & Save Score
                    </button>
                    <Link
                      href="/auth"
                      className="px-8 py-4 border border-gray-300 text-gray-700 rounded-xl hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#147AFF] focus:ring-offset-2 transition-all font-semibold"
                    >
                      Sign In to Existing Account
                    </Link>
                  </div>
                </div>
              </div>
            </section>
          )}

        </div>
      </div>

      {/* Claim Score Modal */}
      <ClaimScoreModal
        isOpen={showClaimModal}
        onClose={() => setShowClaimModal(false)}
        onClaimSuccess={() => {
          setShowClaimModal(false);
          // Optionally refresh the page or update the session data
          window.location.reload();
        }}
        sessionId={sessionData?.sessionId}
      />
    </div>
  );
}

export default function ResultsPage() {
  return (
    <Suspense fallback={
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-50/30 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading results...</p>
        </div>
      </div>
    }>
      <ResultsContent />
    </Suspense>
  );
}
