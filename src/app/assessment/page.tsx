'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import AssessmentQuestion from '@/components/AssessmentQuestion';
import { ASSESSMENT_QUESTIONS } from '../../domain/entities/Assessment';
import { AssessmentResponse } from '../../types/assessment';
import { useAssessment } from '../../presentation/hooks/useAssessment';
import { validateOpenEndedResponse } from '../../application/services/ValidationService';

export default function AssessmentPage() {
  const router = useRouter();
  const { calculateScores, saveSession, error } = useAssessment();
  const [currentStep, setCurrentStep] = useState(0);
  const [responses, setResponses] = useState<AssessmentResponse[]>([]);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [location, setLocation] = useState('');
  const [industry, setIndustry] = useState('');

  // Step 0 is location/industry, then questions start at step 1
  const isLocationStep = currentStep === 0;
  const currentQuestion = isLocationStep ? null : ASSESSMENT_QUESTIONS[currentStep - 1];
  const totalQuestions = ASSESSMENT_QUESTIONS.length + 1; // +1 for location step
  const progress = ((currentStep + 1) / totalQuestions) * 100;

  const handleResponse = (response: string | number | string[]) => {
    if (!currentQuestion) return;
    
    const newResponse: AssessmentResponse = {
      questionId: currentQuestion.id,
      response,
      category: currentQuestion.category,
      timestamp: new Date(),
    };

    setResponses(prev => {
      const existingIndex = prev.findIndex(r => r.questionId === currentQuestion.id);
      if (existingIndex >= 0) {
        const updated = [...prev];
        updated[existingIndex] = newResponse;
        return updated;
      }
      return [...prev, newResponse];
    });
  };

  const canProceed = () => {
    if (isLocationStep) {
      return location.trim() && industry.trim();
    }

    if (!currentQuestion) return false;
    
    const currentResponse = responses.find(r => r.questionId === currentQuestion.id);
    if (!currentResponse) return false;

    if (currentQuestion.type === 'openEnded') {
      const textResponse = currentResponse.response as string;
      return currentQuestion.minCharacters
        ? validateOpenEndedResponse(textResponse, currentQuestion.minCharacters)
        : textResponse.trim().length > 0;
    }

    if (currentQuestion.type === 'multiSelect') {
      const selectedOptions = currentResponse.response as string[];
      return selectedOptions.length > 0;
    }

    return true;
  };

  const handleNext = () => {
    if (currentStep < totalQuestions - 1) {
      setCurrentStep(currentStep + 1);
    } else {
      handleSubmit();
    }
  };

  const handleSubmit = async () => {
    if (isSubmitting) return;
    
    setIsSubmitting(true);
    
    try {
      // Calculate scores using the new architecture
      const scores = await calculateScores(responses);
      
      // Generate session ID
      const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      
      // Save session using the new architecture
      await saveSession({
        sessionId,
        responses,
        scores,
        starRating: Math.ceil(scores.overallScore / 20), // Convert to 1-5 scale
        categoryBreakdown: {
          personalBackground: scores.personalBackground,
          entrepreneurialSkills: scores.entrepreneurialSkills,
          resources: scores.resources,
          behavioralMetrics: scores.behavioralMetrics,
          growthVision: scores.growthVision,
        },
        geminiFeedback: {
          feedback: "Your personalized feedback will be generated by AI based on your responses.",
          strengths: "Analyzing your strengths...",
          focusAreas: "Identifying focus areas...",
          nextSteps: "Generating next steps...",
        },
        userId: undefined, // Anonymous for now
      });

      // Navigate to results
      router.push(`/assessment/results/${sessionId}`);
    } catch (err) {
      console.error('Assessment submission failed:', err);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handlePrevious = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const renderLocationStep = () => (
    <div className="max-w-2xl mx-auto p-6">
      <h2 className="text-2xl font-bold mb-6">Tell us about your business</h2>
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium mb-2">Industry</label>
          <select
            value={industry}
            onChange={(e) => setIndustry(e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white"
          >
            <option value="">Select an industry</option>
            <option value="Technology & Software">Technology & Software</option>
            <option value="E-Commerce & Retail">E-Commerce & Retail</option>
            <option value="Healthcare & Biotech">Healthcare & Biotech</option>
            <option value="Finance & FinTech">Finance & FinTech</option>
            <option value="Real Estate & PropTech">Real Estate & PropTech</option>
            <option value="Education & EdTech">Education & EdTech</option>
            <option value="Food & Beverage">Food & Beverage</option>
            <option value="Manufacturing & Consumer Goods">Manufacturing & Consumer Goods</option>
            <option value="Creative & Media">Creative & Media</option>
            <option value="Transportation & Logistics">Transportation & Logistics</option>
            <option value="Energy & Sustainability">Energy & Sustainability</option>
            <option value="Professional Services (Consulting, Law, etc.)">Professional Services (Consulting, Law, etc.)</option>
            <option value="Government & Nonprofit">Government & Nonprofit</option>
            <option value="Other">Other</option>
          </select>
        </div>
        <div>
          <label className="block text-sm font-medium mb-2">Location</label>
          <select
            value={location}
            onChange={(e) => setLocation(e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white"
          >
            <option value="">Select a location</option>
            <option value="Alabama">Alabama</option>
            <option value="Alaska">Alaska</option>
            <option value="Arizona">Arizona</option>
            <option value="Arkansas">Arkansas</option>
            <option value="California">California</option>
            <option value="Colorado">Colorado</option>
            <option value="Connecticut">Connecticut</option>
            <option value="Delaware">Delaware</option>
            <option value="District of Columbia">District of Columbia</option>
            <option value="Florida">Florida</option>
            <option value="Georgia">Georgia</option>
            <option value="Hawaii">Hawaii</option>
            <option value="Idaho">Idaho</option>
            <option value="Illinois">Illinois</option>
            <option value="Indiana">Indiana</option>
            <option value="Iowa">Iowa</option>
            <option value="Kansas">Kansas</option>
            <option value="Kentucky">Kentucky</option>
            <option value="Louisiana">Louisiana</option>
            <option value="Maine">Maine</option>
            <option value="Maryland">Maryland</option>
            <option value="Massachusetts">Massachusetts</option>
            <option value="Michigan">Michigan</option>
            <option value="Minnesota">Minnesota</option>
            <option value="Mississippi">Mississippi</option>
            <option value="Missouri">Missouri</option>
            <option value="Montana">Montana</option>
            <option value="Nebraska">Nebraska</option>
            <option value="Nevada">Nevada</option>
            <option value="New Hampshire">New Hampshire</option>
            <option value="New Jersey">New Jersey</option>
            <option value="New Mexico">New Mexico</option>
            <option value="New York">New York</option>
            <option value="North Carolina">North Carolina</option>
            <option value="North Dakota">North Dakota</option>
            <option value="Ohio">Ohio</option>
            <option value="Oklahoma">Oklahoma</option>
            <option value="Oregon">Oregon</option>
            <option value="Pennsylvania">Pennsylvania</option>
            <option value="Rhode Island">Rhode Island</option>
            <option value="South Carolina">South Carolina</option>
            <option value="South Dakota">South Dakota</option>
            <option value="Tennessee">Tennessee</option>
            <option value="Texas">Texas</option>
            <option value="Utah">Utah</option>
            <option value="Vermont">Vermont</option>
            <option value="Virginia">Virginia</option>
            <option value="Washington">Washington</option>
            <option value="West Virginia">West Virginia</option>
            <option value="Wisconsin">Wisconsin</option>
            <option value="Wyoming">Wyoming</option>
            <option value="American Samoa">American Samoa</option>
            <option value="Guam">Guam</option>
            <option value="Northern Mariana Islands">Northern Mariana Islands</option>
            <option value="Puerto Rico">Puerto Rico</option>
            <option value="U.S. Virgin Islands">U.S. Virgin Islands</option>
          </select>
        </div>
      </div>
    </div>
  );

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="max-w-md mx-auto p-6 bg-white rounded-lg shadow-lg">
          <h2 className="text-xl font-bold text-red-600 mb-4">Error</h2>
          <p className="text-gray-600 mb-4">{error}</p>
          <button
            onClick={() => window.location.reload()}
            className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Progress Bar */}
      <div className="bg-white shadow-sm">
        <div className="max-w-4xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium text-gray-700">
              Question {currentStep + 1} of {totalQuestions}
            </span>
            <span className="text-sm font-medium text-gray-700">
              {Math.round(progress)}% Complete
            </span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div
              className="bg-blue-600 h-2 rounded-full transition-all duration-300"
              style={{ width: `${progress}%` }}
            />
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-4xl mx-auto px-4 py-8">
        {isLocationStep ? (
          renderLocationStep()
        ) : (
          <AssessmentQuestion
            question={currentQuestion!}
            onResponse={handleResponse}
            currentResponse={responses.find(r => r.questionId === currentQuestion!.id)}
          />
        )}

        {/* Navigation */}
        <div className="flex justify-between mt-8">
          <button
            onClick={handlePrevious}
            disabled={currentStep === 0}
            className="px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Previous
          </button>
          
          <button
            onClick={handleNext}
            disabled={!canProceed() || isSubmitting}
            className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isSubmitting ? 'Processing...' : currentStep === totalQuestions - 1 ? 'Submit' : 'Next'}
          </button>
        </div>
      </div>
    </div>
  );
}
